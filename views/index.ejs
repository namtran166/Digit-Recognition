<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Học ít thôi!</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm"
        crossorigin="anonymous">
</head>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@0.14.2/dist/tf.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.4.0/Chart.min.js"></script>



<style>
    #canvas {
        cursor: crosshair;
        border: 1px solid #000000;
    }
</style>

<body>

    <canvas id="canvas" width="400" height="400"></canvas>
    <input type="button" value="draw" style="display: none" onclick="use_tool('draw');" />
    <input type="button" value="Clear" onclick="erase()">
    <input type="button" value="Predict" onclick="predict()">
    <div id="output"></div>
    <p id="result"></p>

    <script>
        // Definition of the component supporting the model
        // ...
        //Canvas
        var canvas = document.getElementById('canvas');
        canvas.style.backgroundColor = "black";
        var ctx = canvas.getContext('2d');
        //Variables
        var canvasx = $(canvas).offset().left;
        var canvasy = $(canvas).offset().top;
        var last_mousex = last_mousey = 0;
        var mousex = mousey = 0;
        var mousedown = false;
        var tooltype = 'draw';
        // var model = tf.loadModel('https://gogul09.github.io/models/digitrecognizercnn/model.json')


        //Mousedown
        $(canvas).on('mousedown', function (e) {
            last_mousex = mousex = parseInt(e.clientX - canvasx);
            last_mousey = mousey = parseInt(e.clientY - canvasy);
            mousedown = true;
        });

        //Mouseup
        $(canvas).on('mouseup', function (e) {
            mousedown = false;
        });

        //Mousemove
        $(canvas).on('mousemove', function (e) {
            mousex = parseInt(e.clientX - canvasx);
            mousey = parseInt(e.clientY - canvasy);
            if (mousedown) {
                ctx.beginPath();
                if (tooltype == 'draw') {
                    ctx.globalCompositeOperation = 'source-over';
                    ctx.strokeStyle = 'white';
                    ctx.lineWidth = 15;
                } else {
                    ctx.globalCompositeOperation = 'destination-out';
                    ctx.lineWidth = 10;
                }
                ctx.moveTo(last_mousex, last_mousey);
                ctx.lineTo(mousex, mousey);
                ctx.lineJoin = ctx.lineCap = 'round';
                ctx.stroke();
            }
            last_mousex = mousex;
            last_mousey = mousey;
            //Output
            $('#output').html('current: ' + mousex + ', ' + mousey + '<br/>last: ' + last_mousex + ', ' +
                last_mousey + '<br/>mousedown: ' + mousedown);
        });

        //Use draw|erase
        use_tool = function (tool) {
            tooltype = tool; //update
        }

        function erase() {
            var canvas = document.getElementById('canvas');
            var ctx = canvas.getContext('2d');
            ctx.clearRect(0, 0, 400, 400);
        }

        async function predict() {
            var canvas = document.getElementById('canvas');
            var image = canvas.toDataURL();
            var img = tf.fromPixels(canvas)
                .resizeNearestNeighbor([32, 32])
                .mean(2) // grayscale
                .expandDims(2)
                .expandDims()
                .toFloat()
                .div(255.0)
            console.log(img);


            var model = await tf.loadModel('http://localhost:3000/model.json')
            console.log(model);
            // make predictions on the preprocessed image tensor
            let predictions = await model.predict(img).data();

            // get the model's prediction results
            let results = Array.from(predictions)
            console.log(results);
            let index = results.indexOf(Math.max.apply(Math, results));
            console.log(index);
        }
    </script>
</body>

</html>
